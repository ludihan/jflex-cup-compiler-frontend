import java_cup.runtime.*;

parser code {:
    scanner s;
    int depth = 0;

    parser(scanner s){ this.s=s; }

    String formatNode(String label, String... children) {
        StringBuilder result = new StringBuilder();
        result.append(label).append("\n");
        for (String child : children) {
            result.append("  ").append(child.replace("\n", "\n  ")).append("\n");
        }
        return result.toString().stripTrailing();
    }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal String     IF, ELSE, WHILE, FOR, RETURN, TYPE , IDENT, INT, FLOAT, STRING;
terminal String     PLUS, MINUS, TIMES, DIV, LT, GT, LTEQ, GTEQ, ASSIGN, EQ, NEQ;
terminal String     NOT, LPAREN, RPAREN, SEMI, COMMA, LBRACE, RBRACE;
terminal String     MLCOMMENT, SLCOMMENT;

/* Non terminals */
non terminal String        initial, program, comment, func_declar, var_declar, expr, if, while, for, stmt;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left ASSIGN, LT, GT, LTEQ, GTEQ, EQ, NEQ, COMMA, ELSE, SEMI, LPAREN;

start with initial;

initial ::= program:p         {:System.out.println(formatNode("ROOT", p));:};

program ::= stmt:s program:p {: RESULT = formatNode("CODE", s, p);:}
          | stmt:e {: RESULT = e; :}
          ;

stmt ::= comment:c                 {: RESULT = formatNode("COMMENT", c); :}
       | LBRACE:l stmt:s1 RBRACE:r {: RESULT = formatNode("BLOCK", l, s1, r); :}
       | func_declar:c             {: RESULT = formatNode("FUNC_DECLAR", c); :}
       | var_declar:c SEMI:s       {: RESULT = formatNode("VAR_DECLAR", c, s); :}
       | stmt:s1 SEMI:s stmt:s2    {: RESULT = formatNode("STMT_LIST", s1, s2); :}
       | expr:e SEMI:s             {: RESULT = formatNode("EXPR", e, s); :}
       | RETURN expr:e SEMI:s      {: RESULT = formatNode("RETURN", e, s); :}
       | if:e                      {: RESULT = formatNode("IF", e);:}
       | for:e                     {: RESULT = formatNode("FOR", e);:}
       | while:e                   {: RESULT = formatNode("WHILE", e);:}
       ;


if ::= IF LPAREN:lp expr:e RPAREN:rp stmt:l                  {: RESULT = formatNode("IF", lp, e, rp, l);:}
     | IF LPAREN:lp expr:e RPAREN:rp stmt:l1 ELSE:el stmt:l2 {: RESULT = formatNode("IF", lp, e, rp, l1, el, l2);:};

for ::= FOR:f LPAREN:lp stmt:e1 stmt:e2 expr:e3 RPAREN:rp stmt:st {: RESULT = formatNode("FOR", f, lp, e1, e2, e3, rp, st);:};

while ::= WHILE:w LPAREN:lp expr:e RPAREN:rp stmt:st {: RESULT = formatNode("WHILE", w, lp, e, rp, st);:};

comment  ::= MLCOMMENT:c {: RESULT = formatNode("MLCOMMENT", c); :}
           | SLCOMMENT:c {: RESULT = formatNode("SLCOMMMENT", c); :}
           ;

func_declar ::= TYPE:t IDENT:i LPAREN:l RPAREN:r stmt:b  {: RESULT = formatNode("FUNCTION", t, i, l, r, b); :} ;

var_declar ::= TYPE:t IDENT:i                 {: RESULT = formatNode("VAR", t, i); :}
             | TYPE:t IDENT:i ASSIGN:a expr:e {: RESULT = formatNode("VAR", t, i, a, e); :}
               ;

expr     ::= expr:e1 PLUS expr:e2      {: RESULT = formatNode("PLUS", e1, e2); :}
           | expr:e1 MINUS expr:e2     {: RESULT = formatNode("MINUS", e1, e2); :}
           | expr:e1 TIMES expr:e2     {: RESULT = formatNode("TIMES", e1, e2); :}
           | expr:e1 DIV expr:e2       {: RESULT = formatNode("DIV", e1, e2); :}
           | expr:e1 LT expr:e2        {: RESULT = formatNode("LT", e1, e2); :}
           | expr:e1 GT expr:e2        {: RESULT = formatNode("GT", e1, e2); :}
           | expr:e1 LTEQ expr:e2      {: RESULT = formatNode("LTEQ", e1, e2); :}
           | expr:e1 GTEQ expr:e2      {: RESULT = formatNode("GTEQ", e1, e2); :}
           | expr:e1 EQ expr:e2        {: RESULT = formatNode("EQ", e1, e2); :}
           | expr:e1 NEQ expr:e2       {: RESULT = formatNode("NEQ", e1, e2); :}
           | NOT expr:e                {: RESULT = formatNode("NOT", e); :}
           | MINUS expr:e              {: RESULT = formatNode("MINUS", e); :}
           | LPAREN expr:e RPAREN      {: RESULT = formatNode("PAREN", e); :}
           | INT:n                     {: RESULT = formatNode("INT", n); :}
           | FLOAT:n                   {: RESULT = formatNode("FLOAT", n); :}
           | STRING:n                  {: RESULT = formatNode("STRING", n); :}
           | IDENT:i LPAREN:l RPAREN:r {: RESULT = formatNode("FUNC_CALL", i, l, r); :}
           | expr:e1 COMMA expr:e2{: RESULT = formatNode("COMMA", e1, e2); :}
           ;

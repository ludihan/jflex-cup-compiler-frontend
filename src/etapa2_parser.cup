import java_cup.runtime.*;

parser code {:
    scanner s;
    int depth = 0;

    parser(scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            IF, ELSE, WHILE, FOR, RETURN, TYPE, IDENT, INT, FLOAT, STRING;
terminal            PLUS, MINUS, TIMES, DIV, LT, GT, LTEQ, GTEQ, ASSIGN, EQ, NEQ;
terminal            NOT, INC, DEC, LPAREN, RPAREN, COLON, COMMA, LBRACE, RBRACE;
terminal            MLCOMMENT, SLCOMMENT;

/* Non terminals */
non terminal        func_declar, var_declar, expr, comment, if, while, for, block;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left ASSIGN;

/* The grammar rules */
initial
expr     ::= expr:e1 PLUS expr:e2          {: System.out.println(" ".repeat(depth) + "PLUS: " + e1 + " + " + e2); depth++ :}
           | expr:e1 MINUS expr:e2         {: System.out.println(" ".repeat(depth) + "MINUS: " + e1 + " - " + e2); depth++ :}
           | expr:e1 TIMES expr:e2         {: System.out.println(" ".repeat(depth) + "TIMES: " + e1 + " * " + e2); depth++ :}
           | expr:e1 DIV expr:e2           {: System.out.println(" ".repeat(depth) + "DIV: " + e1 + " / " + e2); depth++ :}
           | MINUS expr:e                  {: System.out.println(" ".repeat(depth) + "NEG: " + e); depth++ :}
           | LPAREN expr:e RPAREN          {: System.out.println(" ".repeat(depth) + "PAREN: " + e); depth++ :}
           | INT:n                         {: System.out.println(" ".repeat(depth) + "INT: " + n); :}
           | FLOAT:n                       {: System.out.println(" ".repeat(depth) + "FLOAT: " + n); :}
           | STRING:n                      {: System.out.println(" ".repeat(depth) + "STRING: " + n); :}
           ;
